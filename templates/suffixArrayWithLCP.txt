class SuffixArray {
    int n;
    string s;
    vector<int> suffixArray, lg, lcp;
    vector<int> sort_cyclic_shifts(string &s) {
        int n = s.size();
        const int alphabet = 256;
        vector<int> p(n), c(n), cnt(max(alphabet, n), 0);
        for (int i = 0; i < n; i++) cnt[s[i]]++;
        for (int i = 1; i < alphabet; i++) cnt[i] += cnt[i - 1];
        for (int i = 0; i < n; i++) p[--cnt[s[i]]] = i;
        c[p[0]] = 0;
        int classes = 1;
        for (int i = 1; i < n; i++) {
            if (s[p[i]] != s[p[i - 1]]) classes++;
            c[p[i]] = classes - 1;
        }
        vector<int> pn(n), cn(n);
        for (int h = 0; (1 << h) < n; ++h) {
            for (int i = 0; i < n; i++) {
                pn[i] = p[i] - (1 << h);
                if (pn[i] < 0) pn[i] += n;
            }
            fill(cnt.begin(), cnt.begin() + classes, 0);
            for (int i = 0; i < n; i++) cnt[c[pn[i]]]++;
            for (int i = 1; i < classes; i++) cnt[i] += cnt[i - 1];
            for (int i = n - 1; i >= 0; i--) p[--cnt[c[pn[i]]]] = pn[i];
            cn[p[0]] = 0;
            classes = 1;
            for (int i = 1; i < n; i++) {
                pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
                pair<int, int> prev = {c[p[i - 1]],
                                       c[(p[i - 1] + (1 << h)) % n]};
                if (cur != prev) ++classes;
                cn[p[i]] = classes - 1;
            }
            c.swap(cn);
        }
        return p;
    }
    void computeLog(int MAXN) {
        lg.resize(MAXN + 1);
        lg[1] = 0;
        for (int i = 2; i <= MAXN; i++) lg[i] = lg[i / 2] + 1;
    }
    vector<int> lcp_construction(const string &s, const vector<int> &p) {
        int n = s.size();
        vector<int> rank(n, 0);
        for (int i = 0; i < n; i++) rank[p[i]] = i;

        int k = 0;
        vector<int> lcp(n - 1, 0);
        for (int i = 0; i < n; i++) {
            if (rank[i] == n - 1) {
                k = 0;
                continue;
            }
            int j = p[rank[i] + 1];
            while (i + k < n && j + k < n && s[i + k] == s[j + k]) k++;
            lcp[rank[i]] = k;
            if (k) k--;
        }
        return lcp;
    }

   public:
    SuffixArray(string s) {
        this->n = s.size();
        this->s = s;
        s += "$";
        this->suffixArray = sort_cyclic_shifts(s);
        this->suffixArray.erase(this->suffixArray.begin());
        computeLog(s.size() + 10);
        this->lcp = lcp_construction(this->s, this->suffixArray);
    }
    vector<int> getSuffixArray() {
        // suffixArray(sA) is the sorted index based suffix starting from i
        return this->suffixArray;
    }
    vector<int> getLCPArray() {
        // lcp[i] represent longest common prefix in suffix sA[i] & sA[i + 1]
        // for any lcp of any two suffix p[i], p[j] take min(lcp[i]...lcp[j])
        // can use Range Minimum Queries for this (sparse table, Segment Tree...)
        return lcp;
    }
};