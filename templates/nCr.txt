const int MOD = 1e9 + 7;
int binExp(int a, int b) {
    int res = 1;
    while (b > 0) {
        if (b & 1) res = (res * 1LL * a) % MOD;
        a = (a * 1LL * a) % MOD;
        b >>= 1;
    }
    return res;
}
int add(int a, int b) { return (a + 0LL + b) % MOD; }
int sub(int a, int b) { return (a - b + MOD) % MOD; }
int mul(int a, int b) { return (a * 1LL * b) % MOD; }
int divi(int a, int b) { return mul(a, binExp(b, MOD - 2)); }
vector<int> fact, invFact;
void compute(int N) {
    fact = vector<int>(N + 1);
    invFact = vector<int>(N + 1);
    fact[0] = 1;
    for (int i = 1; i <= N; i++) fact[i] = mul(fact[i - 1], i);
    invFact[N] = binExp(fact[N], MOD - 2);
    for (int i = N - 1; i >= 0; i--) invFact[i] = mul(invFact[i + 1], i + 1);
}
int nCr(int n, int r) {
    if (r == 0) return 1;
    if (r > n) return 0;
    return mul(mul(fact[n], invFact[r]), invFact[n - r]);
}